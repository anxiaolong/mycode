常用命令
1.git status 查看当前差异
2.git add <file>... 添加文件到版本库
3.git commit bin/.gitignore  src/java_31_git/git-tips -m "git update" 提交文件
4.git push 推送到远程仓库
5.git diff 当前工作目录和上次提交与本地索引间的差异
6.git fetch 将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中
7.git pull  将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决
8.git reset --soft HEAD^ commit之后回退到上一个版本
9.git reset HEAD  git add . 之后回退到add之前
10.git branch -r 查看远程分支
11.git branch 查看本地分支 加-a参数同时查看本地和远程分支
12.git checkout master 切换分支
13.git checkout -b dev origin/dev  #作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支
14.git pull origin dev 切到分支后拉取远程分支代码
15.git log --stat 查看更新记录包含哪些文件
16.git show 2ba1b7b73e29b41f4d3dc5a0d3b641d97412964b 查看提交涉及的具体内容

git合并分支代码到主干
1.切换到主干 git checkout master
2.拉取主干最新代码 git pull origin master
3.合并分支 git merge dev
4.查看是否有冲突 git status
5.push到主干代码到远程 git push origin master

git合并冲突解决
产生冲突的必要条件：基于同一个版本增删改了不同的内容，合并过程产生冲突
三个分支：master dev1 dev2
dev1和dev2都是基于master，dev1和dev2分别做了不同的内容操作
---------------------------
1.master合并dev1（不会产出冲突）
git checkout master
git merge --no-ff dev1 （合并代码和commit一样会产生git节点，每个节点对应一个代码版本）
	tip:git merge默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。
	使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，建议采用这种方法
---------------------------	
2.master再合并dev2（在相同文件相同位置修改了不同内容，会产出冲突）
git checkout master
git merge --no-ff dev2 （合并之后有冲突会产生冲突文件）
---------------------------
3.解决冲突（有冲突也合并了文件，只是在文件中标识了具体的冲突内容，手动修改提交就行了）
修改冲突文件
git add
git commit 
